// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Midis.UnitTests.ControllerChangeExtensions
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ToRangeFeature : Xunit.IUseFixture<ToRangeFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ToRange.feature"
#line hidden
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ToRange", "In order to support\nAs a composer\nI want to rescale controller change values", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public virtual void SetFixture(ToRangeFeature.FixtureData fixtureData)
        {
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "ToRange")]
        [Xunit.TraitAttribute("Description", "Values should scale properly at lower-bound of 0")]
        public virtual void ValuesShouldScaleProperlyAtLower_BoundOf0()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Values should scale properly at lower-bound of 0", new string[] {
                        "extensions"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given("I have scaled the values to between 0 and 63");
#line 9
  testRunner.When("I provide the values \"0, 4, 5, 63, 64, 65, 90, 126, 127\"");
#line 10
  testRunner.Then("the result should be \"0, 2, 31, 32, 45, 63\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "ToRange")]
        [Xunit.TraitAttribute("Description", "Values should scale properly if the floor and ceiling are swapped")]
        public virtual void ValuesShouldScaleProperlyIfTheFloorAndCeilingAreSwapped()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Values should scale properly if the floor and ceiling are swapped", new string[] {
                        "extensions"});
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
  testRunner.Given("I have scaled the values to between 64 and 1");
#line 15
  testRunner.When("I provide the values \"0, 4, 5, 63, 64, 65, 90, 126, 127\"");
#line 16
  testRunner.Then("the result should be \"1, 3, 32, 33,  46, 64\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "ToRange")]
        [Xunit.TraitAttribute("Description", "Values should not repeat")]
        public virtual void ValuesShouldNotRepeat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Values should not repeat", new string[] {
                        "extensions"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
  testRunner.Given("I have scaled the values to between 30 and 35");
#line 21
  testRunner.When("I provide the values \"0, 9, 34, 90, 1, 2, 30, 30\"");
#line 22
  testRunner.Then("the result should be \"30, 31, 34, 30, 31\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "ToRange")]
        [Xunit.TraitAttribute("Description", "Values should be rooted at th lower bound")]
        public virtual void ValuesShouldBeRootedAtThLowerBound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Values should be rooted at th lower bound", new string[] {
                        "extensions"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
  testRunner.Given("I have scaled the values to between 64 and 127");
#line 27
  testRunner.When("I provide the values \"0, 4, 5, 63, 64, 65, 90, 126, 127\"");
#line 28
  testRunner.Then("the result should be \"64, 66, 95, 96, 109, 127\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "ToRange")]
        [Xunit.TraitAttribute("Description", "A scale of one value should only output one value")]
        public virtual void AScaleOfOneValueShouldOnlyOutputOneValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A scale of one value should only output one value", new string[] {
                        "extensions"});
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
  testRunner.Given("I have scaled the values to between 34 and 34");
#line 33
  testRunner.When("I provide the values \"0, 4, 5, 63, 64, 65, 90, 126, 127\"");
#line 34
  testRunner.Then("the result should be 34");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "ToRange")]
        [Xunit.TraitAttribute("Description", "Two-value range")]
        public virtual void Two_ValueRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two-value range", new string[] {
                        "extensions"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
  testRunner.Given("I have scaled the values to between 0 and 1");
#line 39
  testRunner.When("I provide the values \"0, 4, 5, 63, 64, 65, 90, 126, 127\"");
#line 40
  testRunner.Then("the result should be \"0, 1\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ToRangeFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ToRangeFeature.FeatureTearDown();
            }
        }
    }
}
#endregion
